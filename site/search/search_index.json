{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Thorlabs Controllers","text":"<p>The following documentation define the installation, setup, usage and error forum for the QuantumION Thorlabs Controllers</p>"},{"location":"#1-installation","title":"1.  Installation \ud83d\udd17","text":"<p>This section explains how to install the Thorlabs repository and setup an environment locally</p>"},{"location":"#2-docker-container","title":"2.  Docker Container \ud83d\udd17","text":"<p>This section explains how to use the Thorlabs repository in a container</p>"},{"location":"#3-thorlabs-cubes","title":"3.  Thorlabs Cubes \ud83d\udd17","text":"<p>This section explains how the Thorlabs controllers work, use cases, and code examples</p>"},{"location":"#sipyco","title":".  SiPyCo \ud83d\udd17","text":"<p>This section explains how sipyco is used to execure remote procedure calls (RPC)</p>"},{"location":"#repository-layout","title":"Repository Layout","text":"<pre><code>\ud83d\udcc1 .github/workflows/        # GitHub actions for CI/CD pipelines and automation  \n\ud83d\udcc1 docs/                     # Documentation-related files, built with MkDocs  \n\ud83d\udcc1 src/thorlabs_cube/  \n   \ud83d\udcc1 driver/                   # Drivers for the supported Thorlabs products  \n       \ud83d\udcc1 kcube/                    # Driver for Thorlabs K-Cube controllers  \n       \ud83d\udcc1 tcube/                    # Driver for Thorlabs T-Cube controllers  \n       \ud83d\udcc4 base.py                   # Base class for K-Cube and T-Cube drivers  \n       \ud83d\udcc4 message.py                # Defines enumerated constants (hex) for communication  \n   \ud83d\udcc4 aqctl_thorlabs_cube.py    # ARTIQ communication for controllers  \n\ud83d\udcc1 test/                     # Test files and test case implementations  \n\ud83d\udcc4 Dockerfile                # Docker container configuration  \n\ud83d\udcc4 compose.yml               # Multi-container setup configuration  \n\ud83d\udcc4 README.md                 # Project overview and guide  \n\ud83d\udcc4 setup.py                  # Python package setup script  \n\ud83d\udcc4 .pre-commit-config.yaml   # Pre-commit hooks for linting/formatting  \n\ud83d\udcc4 .flake8                   # Linter configuration  \n\ud83d\udcc4 .gitignore                # Git ignored files  \n\ud83d\udcc4 .dockerignore             # Docker ignored files  \n</code></pre>"},{"location":"sections/docker/","title":"Docker Container","text":""},{"location":"sections/docker/#step-1-describe-a-container-within-composeyml","title":"Step 1. Describe a container within compose.yml","text":"<pre><code>container_name: ksc101\n        restart: always\n        ports:\n            - 3255:3255\n        devices:\n            - /dev/kdc101:/dev/ttyUSB0\n        networks:\n            - thorlabs_cube\n        build:\n            context: ./\n            dockerfile: ./Dockerfile\n        # to run in simulation mode, include \"--simulation\"\n        # in the entrypoint command after port number\n        entrypoint: [aqctl_thorlabs_cube]\n        command: [-p, '3255', -P, ksc101, -d, /dev/ttyUSB0, --bind, '*']\n</code></pre>"},{"location":"sections/docker/#explanation-of-key-elements","title":"Explanation of Key Elements:","text":"<ul> <li> <p><code>container_name</code>   The name given to the container, used to identify which containers are spun up.   In this example, the container is named <code>ksc101</code>.</p> </li> <li> <p><code>restart</code>   Specifies the restart policy for the container. <code>always</code> ensures the container restarts automatically if it stops.</p> </li> <li> <p><code>ports</code>:   Maps port <code>3255</code> on the host to port <code>3255</code> inside the container. Format <code>&lt;host_port&gt;:&lt;container_port&gt;</code></p> </li> <li> <p><code>devices</code>   Maps the hardware device <code>/dev/ksc101</code> on the host to <code>/dev/ttyUSB0</code> inside the container. This enables the container to access the hardware directly.</p> </li> <li> <p><code>networks</code>   Indicates the custom network <code>thorlabs_cube</code> to which the container belongs. This allows communication between containers in the same network.</p> </li> <li> <p><code>build</code>   Specifies how the container image should be built. <code>context</code> points to the build directory (here, the current directory <code>./</code>). <code>dockerfile</code> path to the Dockerfile used to build the image.</p> </li> <li> <p><code>entrypoint</code>   Specifies the executable that runs when the container starts. In this case, it is <code>aqctl_thorlabs_cube</code>.</p> </li> <li> <p><code>command</code>   Specifies additional arguments passed to the <code>entrypoint</code>.  </p> <ul> <li><code>-p '3255'</code>: Specifies the port.  </li> <li><code>-P ksc101</code>: Specifies the device protocol.  </li> <li><code>-d /dev/ttyUSB0</code>: Points to the device.  </li> <li><code>--bind '*'</code>: Allows binding to all network interfaces.</li> </ul> </li> </ul>"},{"location":"sections/docker/#step-2-build-and-launch-the-thorlabs-application-with-docker-compose","title":"Step 2. Build and launch the Thorlabs application with Docker Compose:","text":"<pre><code>$ docker compose build \n$ docker compose up -d\n</code></pre> <ul> <li>Uses the information given within the compose.yml file to build and spin up the Thorlabs application in a container</li> </ul>"},{"location":"sections/installation/","title":"Installation","text":""},{"location":"sections/installation/#step-1-clone-the-repository-then-install-using-pip","title":"Step 1: Clone the repository, then install using pip:","text":"<pre><code>$ git clone git@github.com:quantumion/thorlabs_cube.git\n$ cd thorlabs_cube\n</code></pre> <p>It is suggested to create python environment using venv for repository dependencies</p>"},{"location":"sections/installation/#step-2-create-a-python-virtual-environment","title":"Step 2: Create a Python virtual environment","text":"<pre><code>$ python3 -m venv venv\n$ source venv/bin/activate\n$ pip install .\n</code></pre> <ul> <li>venv is the standard naming convention for Python environments</li> <li>setup.py will be targetted for the installation of all repository dependencies</li> </ul>"},{"location":"sections/installation/#step-3-optionally-build-mkdocs-documentation","title":"Step 3: Optionally, build MkDocs documentation","text":"<pre><code>$ mkdocs serve\n</code></pre>"},{"location":"sections/sipyco/","title":"SiPyCo","text":""},{"location":"sections/cube/cube/","title":"Thorlabs Cube","text":"<p>Cubes are controllers made by Thorlabs that are used to control a variety of devices such as motors, piezo actuators, and other laboratory equipment. These controllers, including the K-Cube and T-Cube series, are commonly used in experimental setups for precise motion control and automation.</p>"},{"location":"sections/cube/cube/#t-cubes","title":"T-Cubes","text":"<ul> <li>TDC001: T-Cube DC Servo Motor Controller \ud83d\udd17</li> <li>TSC001: T-Cube Shutter Controller \ud83d\udd17</li> <li>TPZ001: T-Cube Piezo Controller \ud83d\udd17</li> <li>TPA101: T-Cube Position Sensing Detector Controller \ud83d\udd17</li> </ul>"},{"location":"sections/cube/cube/#k-cubes","title":"K-Cubes","text":"<ul> <li>KDC101: K-Cube DC Servo Motor Controller</li> <li>KSC101: K-Cube Solenoid Controller</li> <li>KPZ101: K-Cube Piezo Controller</li> <li>KPA101: K-Cube Position Sensing Detector Auto Aligner</li> </ul>"},{"location":"sections/cube/kcube/kdc101/","title":"KDC","text":""},{"location":"sections/cube/kcube/kpz101/","title":"KPZ","text":""},{"location":"sections/cube/tcube/tdc001/","title":"TDC001","text":""},{"location":"sections/cube/tcube/tdc001/#controller-description","title":"Controller Description","text":"<p>The TDC001 is a compact single-channel T-Cube controller from Thorlabs designed for precise control of DC servo motors. It is commonly used for positioning applications requiring fine adjustments. The TDC001 supports bidirectional motor control, with adjustable speed and position settings, and is compatible with Thorlabs\u2019 DC servo actuators. It features USB connectivity for computer control via Thorlabs\u2019 Kinesis Software or QuantumION's Thorlabs Cube Repository</p>"},{"location":"sections/cube/tcube/tdc001/#controller-use-cases","title":"Controller Use-Cases","text":"<ul> <li>TDC001 is used in applications requiring precise motion control, such as:<ol> <li>Optical Alignment: Positioning lenses, mirrors, or other optical components in labs and industrial setups.</li> <li>Microscopy: Fine-tuning stages or focus mechanisms.</li> <li>Laser Systems: Aligning and stabilizing beams in optical experiments.</li> </ol> </li> </ul>"},{"location":"sections/cube/tcube/tdc001/#peripherals-examples","title":"Peripherals Examples","text":"<ul> <li>DC Servo Actuators </li> <li>Motorized Mirror Mounts </li> <li>Motorized Stages </li> </ul>"},{"location":"sections/cube/tcube/tdc001/#api-reference","title":"API Reference","text":"<p>               Bases: <code>_Cube</code></p> <p>TDC001 T-Cube Motor Controller class</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>class Tdc(_Cube):\n    \"\"\"TDC001 T-Cube Motor Controller class\"\"\"\n\n    def __init__(self, serial_dev: str):\n        super().__init__(serial_dev)\n        self.status_report_counter = 0\n\n    async def handle_message(self, msg):\n        msg_id = msg.id\n        data = msg.data\n\n        if msg_id == MGMSG.HW_DISCONNECT:\n            raise MsgError(\"Error: Please disconnect the TDC001\")\n        elif msg_id == MGMSG.HW_RESPONSE:\n            raise MsgError(\n                \"Hardware error, please disconnect \" \"and reconnect the TDC001\"\n            )\n        elif msg_id == MGMSG.HW_RICHRESPONSE:\n            (code,) = st.unpack(\"&lt;H\", data[2:4])\n            raise MsgError(\n                \"Hardware error {}: {}\".format(code, data[4:].decode(encoding=\"ascii\"))\n            )\n        elif (\n            msg_id == MGMSG.MOT_MOVE_COMPLETED\n            or msg_id == MGMSG.MOT_MOVE_STOPPED\n            or msg_id == MGMSG.MOT_GET_DCSTATUSUPDATE\n        ):\n            if self.status_report_counter == 25:\n                self.status_report_counter = 0\n                await self.send(Message(MGMSG.MOT_ACK_DCSTATUSUPDATE))\n            else:\n                self.status_report_counter += 1\n            # 'r' is a currently unused and reserved field\n            self.position, self.velocity, r, self.status = st.unpack(\n                \"&lt;LHHL\",\n                data[2:],\n            )\n\n    async def is_moving(self):\n        status_bits = await self.get_status_bits()\n        return (status_bits &amp; 0x2F0) != 0\n\n    async def set_pot_parameters(\n        self, zero_wnd, vel1, wnd1, vel2, wnd2, vel3, wnd3, vel4\n    ):\n        \"\"\"Set pot parameters.\n\n        :param zero_wnd: The deflection from the mid position (in ADC counts\n            0 to 127) before motion can start.\n        :param vel1: The velocity to move when between zero_wnd and wnd1.\n        :param wnd1: The deflection from the mid position (in ADC counts\n            zero_wnd to 127) to apply vel1.\n        :param vel2: The velocity to move when between wnd1 and wnd2.\n        :param wnd2: The deflection from the mid position (in ADC counts\n            wnd1 to 127) to apply vel2.\n        :param vel3: The velocity to move when between wnd2 and wnd3.\n        :param wnd3: The deflection from the mid position (in ADC counts\n            wnd2 to 127) to apply vel3.\n        :param vel4: The velocity to move when beyond wnd3.\n        \"\"\"\n        payload = st.pack(\n            \"&lt;HHLHLHLHL\", 1, zero_wnd, vel1, wnd1, vel2, wnd2, vel3, wnd3, vel4\n        )\n        await self.send(Message(MGMSG.MOT_SET_POTPARAMS, data=payload))\n\n    async def get_pot_parameters(self):\n        \"\"\"Get pot parameters.\n\n        :return: An 8 int tuple containing the following values: zero_wnd,\n            vel1, wnd1, vel2, wnd2, vel3, wnd3, vel4. See\n            :py:meth:`set_pot_parameters()&lt;Tdc.set_pot_parameters&gt;` for a\n            description of each tuple element meaning.\n        :rtype: An 8 int tuple\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_POTPARAMS, [MGMSG.MOT_GET_POTPARAMS], 1\n        )\n        return st.unpack(\"&lt;HLHLHLHL\", get_msg.data[2:])\n\n    async def hub_get_bay_used(self):\n        get_msg = await self.send_request(\n            MGMSG.HUB_REQ_BAYUSED, [MGMSG.HUB_GET_BAYUSED]\n        )\n        return get_msg.param1\n\n    async def set_position_counter(self, position):\n        \"\"\"Set the \"live\" position count in the controller.\n\n        In general, this command is not normally used. Instead, the stage is\n        homed immediately after power-up; and after the homing process is\n        completed, the position counter is automatically updated to show the\n        actual position.\n\n        :param position: The new value of the position counter.\n        \"\"\"\n        payload = st.pack(\"&lt;Hl\", 1, position)\n        await self.send(Message(MGMSG.MOT_SET_POSCOUNTER, data=payload))\n\n    async def get_position_counter(self):\n        \"\"\"Get the \"live\" position count from the controller.\n\n        :return: The value of the position counter.\n        :rtype: int\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_POSCOUNTER, [MGMSG.MOT_GET_POSCOUNTER], 1\n        )\n        return st.unpack(\"&lt;l\", get_msg.data[2:])[0]\n\n    async def set_encoder_counter(self, encoder_count):\n        \"\"\"Set encoder count in the controller.\n\n        This is only applicable to stages and actuators fitted\n        with an encoder. In general this command is not normally used.\n        Instead the device is homed at power-up.\n\n        :param encoder_count: The new value of the encoder counter.\n        \"\"\"\n        payload = st.pack(\"&lt;Hl\", 1, encoder_count)\n        await self.send(Message(MGMSG.MOT_SET_ENCCOUNTER, data=payload))\n\n    async def get_encoder_counter(self):\n        \"\"\"Get encoder count from the controller.\n\n        :return: The value of the encoder counter.\n        :rtype: int\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_ENCCOUNTER, [MGMSG.MOT_GET_ENCCOUNTER], 1\n        )\n        return st.unpack(\"&lt;l\", get_msg.data[2:])[0]\n\n    async def set_velocity_parameters(self, acceleration, max_velocity):\n        \"\"\"Set the trapezoidal velocity parameter.\n\n        :param acceleration: The acceleration in encoder counts/sec/sec.\n        :param max_velocity: The maximum (final) velocity in counts/sec.\n        \"\"\"\n        payload = st.pack(\"&lt;HLLL\", 1, 0, acceleration, max_velocity)\n        await self.send(Message(MGMSG.MOT_SET_VELPARAMS, data=payload))\n\n    async def get_velocity_parameters(self):\n        \"\"\"Get the trapezoidal velocity parameters.\n\n        :return: A 2 int tuple: (acceleration, max_velocity).\n        :rtype: A 2 int tuple (int, int)\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_VELPARAMS, [MGMSG.MOT_GET_VELPARAMS], 1\n        )\n        return st.unpack(\"&lt;LL\", get_msg.data[6:])\n\n    async def set_jog_parameters(\n        self, mode, step_size, acceleration, max_velocity, stop_mode\n    ):\n        \"\"\"Set the velocity jog parameters.\n\n        :param mode: 1 for continuous jogging, 2 for single step jogging.\n        :param step_size: The jog step size in encoder counts.\n        :param acceleration: The acceleration in encoder counts/sec/sec.\n        :param max_velocity: The maximum (final) velocity in encoder\n            counts/sec.\n        :param stop_mode: 1 for immediate (abrupt) stop, 2 for profiled stop\n            (with controlled deceleration).\n        \"\"\"\n        payload = st.pack(\n            \"&lt;HHLLLLH\",\n            1,\n            mode,\n            step_size,\n            0,\n            acceleration,\n            max_velocity,\n            stop_mode,\n        )\n        await self.send(Message(MGMSG.MOT_SET_JOGPARAMS, data=payload))\n\n    async def get_jog_parameters(self):\n        \"\"\"Get the velocity jog parameters.\n\n        :return: A 5 int tuple containing in this order: jog_mode,\n            step_size, acceleration, max_velocity, stop_mode\n        :rtype: A 5 int tuple.\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_JOGPARAMS, [MGMSG.MOT_GET_JOGPARAMS], 1\n        )\n        (jog_mode, step_size, _, acceleration, max_velocity, stop_mode) = st.unpack(\n            \"&lt;HLLLLH\", get_msg.data[2:]\n        )\n        return jog_mode, step_size, acceleration, max_velocity, stop_mode\n\n    async def set_gen_move_parameters(self, backlash_distance):\n        \"\"\"Set the backlash distance.\n\n        :param backlash_distance: The value of the backlash distance,\n            which specifies the relative distance in position counts.\n        \"\"\"\n        payload = st.pack(\"&lt;Hl\", 1, backlash_distance)\n        await self.send(Message(MGMSG.MOT_SET_GENMOVEPARAMS, data=payload))\n\n    async def get_gen_move_parameters(self):\n        \"\"\"Get the backlash distance.\n\n        :return: The value of the backlash distance.\n        :rtype: int\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_GENMOVEPARAMS, [MGMSG.MOT_GET_GENMOVEPARAMS], 1\n        )\n        return st.unpack(\"&lt;l\", get_msg.data[2:])[0]\n\n    async def set_move_relative_parameters(self, relative_distance):\n        \"\"\"Set the following relative move parameter: relative_distance.\n\n        :param relative_distance: The distance to move. This is a signed\n            integer that specifies the relative distance in position encoder\n            counts.\n        \"\"\"\n        payload = st.pack(\"&lt;Hl\", 1, relative_distance)\n        await self.send(Message(MGMSG.MOT_SET_MOVERELPARAMS, data=payload))\n\n    async def get_move_relative_parameters(self):\n        \"\"\"Get the relative distance move parameter.\n\n        :return: The relative distance move parameter.\n        :rtype: int\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_MOVERELPARAMS, [MGMSG.MOT_GET_MOVERELPARAMS], 1\n        )\n        return st.unpack(\"&lt;l\", get_msg.data[2:])[0]\n\n    async def set_move_absolute_parameters(self, absolute_position):\n        \"\"\"Set the following absolute move parameter: absolute_position.\n\n        :param absolute_position: The absolute position to move. This is a\n            signed integer that specifies the absolute move position in encoder\n            counts.\n        \"\"\"\n        payload = st.pack(\"&lt;Hl\", 1, absolute_position)\n        await self.send(Message(MGMSG.MOT_SET_MOVEABSPARAMS, data=payload))\n\n    async def get_move_absolute_parameters(self):\n        \"\"\"Get the absolute position move parameter.\n\n        :return: The absolute position to move.\n        :rtype: int\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_MOVEABSPARAMS, [MGMSG.MOT_GET_MOVEABSPARAMS], 1\n        )\n        return st.unpack(\"&lt;l\", get_msg.data[2:])[0]\n\n    async def set_home_parameters(self, home_velocity):\n        \"\"\"Set the homing velocity parameter.\n\n        :param home_velocity: Homing velocity.\n        \"\"\"\n        payload = st.pack(\"&lt;HHHLL\", 1, 0, 0, home_velocity, 0)\n        await self.send(Message(MGMSG.MOT_SET_HOMEPARAMS, data=payload))\n\n    async def get_home_parameters(self):\n        \"\"\"Get the homing velocity parameter.\n\n        :return: The homing velocity.\n        :rtype: int\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_HOMEPARAMS, [MGMSG.MOT_GET_HOMEPARAMS], 1\n        )\n        return st.unpack(\"&lt;L\", get_msg.data[6:10])[0]\n\n    async def move_home(self):\n        \"\"\"Start a home move sequence.\n\n        This call is blocking until device is homed or move is stopped.\n        \"\"\"\n        await self.send_request(\n            MGMSG.MOT_MOVE_HOME,\n            [MGMSG.MOT_MOVE_HOMED, MGMSG.MOT_MOVE_STOPPED],\n            1,\n        )\n\n    async def set_limit_switch_parameters(\n        self,\n        cw_hw_limit,\n        ccw_hw_limit,\n        cw_sw_limit=0,\n        ccw_sw_limit=0,\n        sw_limit_mode=0x1,\n    ):\n        \"\"\"Set the limit switch parameters.\n\n        :param cw_hw_limit: The operation of clockwise hardware limit switch\n            when contact is made.\n\n            0x01 Ignore switch or switch not present.\n\n            0x02 Switch makes on contact.\n\n            0x03 Switch breaks on contact.\n\n            0x04 Switch makes on contact - only used for homes (e.g. limit\n            switched rotation stages).\n\n            0x05 Switch breaks on contact - only used for homes (e.g. limit\n            switched rotations stages).\n\n            0x06 For PMD based brushless servo controllers only - uses index\n            mark for homing.\n\n            Note. Set upper bit to swap CW and CCW limit switches in code. Both\n            CWHardLimit and CCWHardLimit structure members will have the upper\n            bit set when limit switches have been physically swapped.\n        :param ccw_hw_limit: The operation of counter clockwise hardware limit\n            switch when contact is made.\n        :param cw_sw_limit: Clockwise software limit in position steps, as a\n            32 bit unsigned long. (Not applicable to TDC001 units)\n        :param ccw_sw_limit: Counter clockwise software limit in position steps\n            (scaling as for CW limit). (Not applicable to TDC001 units)\n        :param sw_limit_mode: Software limit switch mode\n\n            0x01 Ignore Limit\n\n            0x02 Stop Immediate at Limit\n\n            0x03 Profiled Stop at limit\n\n            0x80 Rotation Stage Limit (bitwise OR'd with one of the settings\n            above) (Not applicable to TDC001 units)\n        \"\"\"\n        payload = st.pack(\n            \"&lt;HHHLLH\",\n            1,\n            cw_hw_limit,\n            ccw_hw_limit,\n            cw_sw_limit,\n            ccw_sw_limit,\n            sw_limit_mode,\n        )\n        await self.send(Message(MGMSG.MOT_SET_LIMSWITCHPARAMS, data=payload))\n\n    async def get_limit_switch_parameters(self):\n        \"\"\"Get the limit switch parameters.\n\n        :return: A 5 int tuple containing the following in order: cw_hw_limit,\n         ccw_hw_limit, cw_sw_limit, ccw_sw_limit, sw_limit_mode. Cf.\n         description in\n         :py:meth:`set_limit_switch_parameters()\n         &lt;Tdc.set_limit_switch_parameters&gt;`\n         method.\n        :rtype: A 5 int tuple.\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_LIMSWITCHPARAMS, [MGMSG.MOT_GET_LIMSWITCHPARAMS], 1\n        )\n        return st.unpack(\"&lt;HHLLH\", get_msg.data[2:])\n\n    async def move_relative_memory(self):\n        \"\"\"Start a relative move of distance in the controller's memory\n\n        The relative distance parameter used for the move will be the parameter\n        sent previously by a :py:meth:`set_move_relative_parameters()\n        &lt;Tdc.set_move_relative_parameters&gt;`\n        command.\n        \"\"\"\n        await self.send_request(\n            MGMSG.MOT_MOVE_RELATIVE,\n            [MGMSG.MOT_MOVE_COMPLETED, MGMSG.MOT_MOVE_STOPPED],\n            1,\n        )\n\n    async def move_relative(self, relative_distance):\n        \"\"\"Start a relative move\n\n        :param relative_distance: The distance to move in position encoder\n            counts.\n        \"\"\"\n        payload = st.pack(\"&lt;Hl\", 1, relative_distance)\n        await self.send_request(\n            MGMSG.MOT_MOVE_RELATIVE,\n            [MGMSG.MOT_MOVE_COMPLETED, MGMSG.MOT_MOVE_STOPPED],\n            data=payload,\n        )\n\n    async def move_absolute_memory(self):\n        \"\"\"Start an absolute move of distance in the controller's memory.\n\n        The absolute move position parameter used for the move will be the\n        parameter sent previously by a :py:meth:`set_move_absolute_parameters()\n        &lt;Tdc.set_move_absolute_parameters&gt;`\n        command.\n        \"\"\"\n        await self.send_request(\n            MGMSG.MOT_MOVE_ABSOLUTE,\n            [MGMSG.MOT_MOVE_COMPLETED, MGMSG.MOT_MOVE_STOPPED],\n            param1=1,\n        )\n\n    async def move_absolute(self, absolute_distance):\n        \"\"\"Start an absolute move.\n\n        :param absolute_distance: The distance to move. This is a signed\n            integer that specifies the absolute distance in position encoder\n            counts.\n        \"\"\"\n        payload = st.pack(\"&lt;Hl\", 1, absolute_distance)\n        await self.send_request(\n            MGMSG.MOT_MOVE_ABSOLUTE,\n            [MGMSG.MOT_MOVE_COMPLETED, MGMSG.MOT_MOVE_STOPPED],\n            data=payload,\n        )\n\n    async def move_jog(self, direction):\n        \"\"\"Start a jog move.\n\n        :param direction: The direction to jog. 1 is forward, 2 is backward.\n        \"\"\"\n        await self.send_request(\n            MGMSG.MOT_MOVE_JOG,\n            [MGMSG.MOT_MOVE_COMPLETED, MGMSG.MOT_MOVE_STOPPED],\n            param1=1,\n            param2=direction,\n        )\n\n    async def move_velocity(self, direction):\n        \"\"\"Start a move.\n\n        When this method is called, the motor will move continuously in the\n        specified direction using the velocity parameter set by the\n        :py:meth:`set_move_relative_parameters()\n        &lt;Tdc.set_move_relative_parameters&gt;`\n        command until a :py:meth:`move_stop()&lt;Tdc.move_stop&gt;` command (either\n        StopImmediate or StopProfiled) is called, or a limit switch is reached.\n\n        :param direction: The direction to jog: 1 to move forward, 2 to move\n            backward.\n        \"\"\"\n        await self.send(Message(MGMSG.MOT_MOVE_VELOCITY, param1=1, param2=direction))\n\n    async def move_stop(self, stop_mode):\n        \"\"\"Stop any type of motor move.\n\n        Stops any of those motor move: relative, absolute, homing or move at\n        velocity.\n\n        :param stop_mode: The stop mode defines either an immediate (abrupt)\n            or profiled stop. Set this byte to 1 to stop immediately, or to 2\n            to stop in a controlled (profiled) manner.\n        \"\"\"\n        if await self.is_moving():\n            await self.send_request(\n                MGMSG.MOT_MOVE_STOP,\n                [MGMSG.MOT_MOVE_STOPPED, MGMSG.MOT_MOVE_COMPLETED],\n                1,\n                stop_mode,\n            )\n\n    async def set_dc_pid_parameters(\n        self,\n        proportional,\n        integral,\n        differential,\n        integral_limit,\n        filter_control=0x0F,\n    ):\n        \"\"\"Set the position control loop parameters.\n\n        :param proportional: The proportional gain, values in range [0; 32767].\n        :param integral: The integral gain, values in range [0; 32767].\n        :param differential: The differential gain, values in range [0; 32767].\n        :param integral_limit: The integral limit parameter is used to cap the\n            value of the integrator to prevent runaway of the integral sum at\n            the output. Values are in range [0; 32767]. If set to 0, then\n            integration term in the PID loop is ignored.\n        :param filter_control: Identifies which of the above are applied by\n            setting the corresponding bit to 1. By default, all parameters are\n            applied, and this parameter is set to 0x0F (1111).\n        \"\"\"\n        payload = st.pack(\n            \"&lt;HLLLLH\",\n            1,\n            proportional,\n            integral,\n            differential,\n            integral_limit,\n            filter_control,\n        )\n        await self.send(Message(MGMSG.MOT_SET_DCPIDPARAMS, data=payload))\n\n    async def get_dc_pid_parameters(self):\n        \"\"\"Get the position control loop parameters.\n\n        :return: A 5 int tuple containing in this order:\n            proportional gain, integral gain, differential gain, integral limit\n            and filter control. Cf. :py:meth:`set_dc_pid_parameters()\n            &lt;Tdc.set_dc_pid_parameters&gt;`\n            for precise description.\n        :rtype: A 5 int tuple.\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_DCPIDPARAMS, [MGMSG.MOT_GET_DCPIDPARAMS], 1\n        )\n        return st.unpack(\"&lt;LLLLH\", get_msg.data[2:])\n\n    async def set_av_modes(self, mode_bits):\n        \"\"\"Set the LED indicator modes.\n\n        The LED on the control keyboard can be configured to indicate certain\n        driver states.\n\n        :param mode_bits: Set the bit 0 will make the LED flash when the\n            'Ident' message is sent.\n            Set the bit 1 will make the LED flash when the motor reaches a\n            forward or reverse limit switch.\n            Set the bit 3 (value 8) will make the LED lit when motor is moving.\n        \"\"\"\n        payload = st.pack(\"&lt;HH\", 1, mode_bits)\n        await self.send(Message(MGMSG.MOT_SET_AVMODES, data=payload))\n\n    async def get_av_modes(self):\n        \"\"\"Get the LED indicator mode bits.\n\n        :return: The LED indicator mode bits.\n        :rtype: int\n        \"\"\"\n        get_msg = self.send_request(\n            MGMSG.MOT_REQ_AVMODES,\n            [MGMSG.MOT_GET_AVMODES],\n            1,\n        )\n        return st.unpack(\"&lt;H\", get_msg.data[2:])[0]\n\n    async def set_button_parameters(self, mode, position1, position2):\n        \"\"\"Set button parameters.\n\n        The control keypad can be used either to jog the motor, or to perform\n        moves to absolute positions. This function is used to set the front\n        panel button functionality.\n\n        :param mode: If set to 1, the buttons are used to jog the motor. Once\n            set to this mode, the move parameters for the buttons are taken\n            from the arguments of the :py:meth:`set_jog_parameters()\n            &lt;Tdc.set_jog_parameters&gt;`\n            method. If set to 2, each button can be programmed with a\n            differente position value such that the controller will move the\n            motor to that position when the specific button is pressed.\n        :param position1: The position (in encoder counts) to which the motor\n            will move when the top button is pressed.\n        :param position2: The position (in encoder counts) to which the motor\n            will move when the bottom button is pressed.\n        \"\"\"\n        payload = st.pack(\"&lt;HHllHH\", 1, mode, position1, position2, 0, 0)\n        await self.send(Message(MGMSG.MOT_SET_BUTTONPARAMS, data=payload))\n\n    async def get_button_parameters(self):\n        \"\"\"Get button parameters.\n\n        :return: A 3 int tuple containing in this order: button mode,\n            position1 and position2. Cf. :py:meth:`set_button_parameters()\n            &lt;Tdc.set_button_parameters&gt;`\n            for description.\n        :rtype: A 3 int tuple\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_BUTTONPARAMS, [MGMSG.MOT_GET_BUTTONPARAMS], 1\n        )\n        return st.unpack(\"&lt;Hll\", get_msg.data[2:12])\n\n    async def set_eeprom_parameters(self, msg_id):\n        \"\"\"Save the parameter settings for the specified message.\n\n        :param msg_id: The message ID of the message containing the parameters\n            to be saved.\n        \"\"\"\n        payload = st.pack(\"&lt;HH\", 1, msg_id)\n        await self.send(Message(MGMSG.MOT_SET_EEPROMPARAMS, data=payload))\n\n    async def get_dc_status_update(self):\n        \"\"\"Request a status update from the motor.\n\n        This can be used instead of enabling regular updates.\n\n        :return: A 3 int tuple containing in this order: position,\n            velocity, status bits.\n        :rtype: A 3 int tuple\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_DCSTATUSUPDATE, [MGMSG.MOT_GET_DCSTATUSUPDATE], 1\n        )\n        pos, vel, _, stat = st.unpack(\"&lt;LHHL\", get_msg.data[2:])\n        return pos, vel, stat\n\n    async def get_status_bits(self):\n        \"\"\"Request a cut down version of the status update with status bits.\n\n        :return: The motor status.\n        :rtype:\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.MOT_REQ_STATUSBITS, [MGMSG.MOT_GET_STATUSBITS], 1\n        )\n        return st.unpack(\"&lt;L\", get_msg.data[2:])[0]\n\n    async def suspend_end_of_move_messages(self):\n        \"\"\"Disable all unsolicited \"end of move\" messages and error messages\n        returned by the controller.\n\n        i.e., MGMSG.MOT_MOVE_STOPPED, MGMSG.MOT_MOVE_COMPLETED,\n        MGMSGS_MOT_MOVE_HOMED\n        \"\"\"\n        await self.send(Message(MGMSG.MOT_SUSPEND_ENDOFMOVEMSGS))\n\n    async def resume_end_of_move_messages(self):\n        \"\"\"Resume all unsolicited \"end of move\" messages and error messages\n        returned by the controller.\n\n        i.e., MGMSG.MOT_MOVE_STOPPED, MGMSG.MOT_MOVE_COMPLETED,\n        MGMSG.MOT_MOVE_HOMED\n\n        The command also disables the error messages that the controller sends\n        when an error condition is detected:\n        MGMSG.HW_RESPONSE,\n        MGMSG.HW_RICHRESPONSE\n        \"\"\"\n        await self.send(Message(MGMSG.MOT_RESUME_ENDOFMOVEMSGS))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_av_modes","title":"<code>get_av_modes()</code>  <code>async</code>","text":"<p>Get the LED indicator mode bits.</p> <p>:return: The LED indicator mode bits. :rtype: int</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_av_modes(self):\n    \"\"\"Get the LED indicator mode bits.\n\n    :return: The LED indicator mode bits.\n    :rtype: int\n    \"\"\"\n    get_msg = self.send_request(\n        MGMSG.MOT_REQ_AVMODES,\n        [MGMSG.MOT_GET_AVMODES],\n        1,\n    )\n    return st.unpack(\"&lt;H\", get_msg.data[2:])[0]\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_button_parameters","title":"<code>get_button_parameters()</code>  <code>async</code>","text":"<p>Get button parameters.</p> <p>:return: A 3 int tuple containing in this order: button mode,     position1 and position2. Cf. :py:meth:<code>set_button_parameters()     &lt;Tdc.set_button_parameters&gt;</code>     for description. :rtype: A 3 int tuple</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_button_parameters(self):\n    \"\"\"Get button parameters.\n\n    :return: A 3 int tuple containing in this order: button mode,\n        position1 and position2. Cf. :py:meth:`set_button_parameters()\n        &lt;Tdc.set_button_parameters&gt;`\n        for description.\n    :rtype: A 3 int tuple\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_BUTTONPARAMS, [MGMSG.MOT_GET_BUTTONPARAMS], 1\n    )\n    return st.unpack(\"&lt;Hll\", get_msg.data[2:12])\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_dc_pid_parameters","title":"<code>get_dc_pid_parameters()</code>  <code>async</code>","text":"<p>Get the position control loop parameters.</p> <p>:return: A 5 int tuple containing in this order:     proportional gain, integral gain, differential gain, integral limit     and filter control. Cf. :py:meth:<code>set_dc_pid_parameters()     &lt;Tdc.set_dc_pid_parameters&gt;</code>     for precise description. :rtype: A 5 int tuple.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_dc_pid_parameters(self):\n    \"\"\"Get the position control loop parameters.\n\n    :return: A 5 int tuple containing in this order:\n        proportional gain, integral gain, differential gain, integral limit\n        and filter control. Cf. :py:meth:`set_dc_pid_parameters()\n        &lt;Tdc.set_dc_pid_parameters&gt;`\n        for precise description.\n    :rtype: A 5 int tuple.\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_DCPIDPARAMS, [MGMSG.MOT_GET_DCPIDPARAMS], 1\n    )\n    return st.unpack(\"&lt;LLLLH\", get_msg.data[2:])\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_dc_status_update","title":"<code>get_dc_status_update()</code>  <code>async</code>","text":"<p>Request a status update from the motor.</p> <p>This can be used instead of enabling regular updates.</p> <p>:return: A 3 int tuple containing in this order: position,     velocity, status bits. :rtype: A 3 int tuple</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_dc_status_update(self):\n    \"\"\"Request a status update from the motor.\n\n    This can be used instead of enabling regular updates.\n\n    :return: A 3 int tuple containing in this order: position,\n        velocity, status bits.\n    :rtype: A 3 int tuple\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_DCSTATUSUPDATE, [MGMSG.MOT_GET_DCSTATUSUPDATE], 1\n    )\n    pos, vel, _, stat = st.unpack(\"&lt;LHHL\", get_msg.data[2:])\n    return pos, vel, stat\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_encoder_counter","title":"<code>get_encoder_counter()</code>  <code>async</code>","text":"<p>Get encoder count from the controller.</p> <p>:return: The value of the encoder counter. :rtype: int</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_encoder_counter(self):\n    \"\"\"Get encoder count from the controller.\n\n    :return: The value of the encoder counter.\n    :rtype: int\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_ENCCOUNTER, [MGMSG.MOT_GET_ENCCOUNTER], 1\n    )\n    return st.unpack(\"&lt;l\", get_msg.data[2:])[0]\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_gen_move_parameters","title":"<code>get_gen_move_parameters()</code>  <code>async</code>","text":"<p>Get the backlash distance.</p> <p>:return: The value of the backlash distance. :rtype: int</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_gen_move_parameters(self):\n    \"\"\"Get the backlash distance.\n\n    :return: The value of the backlash distance.\n    :rtype: int\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_GENMOVEPARAMS, [MGMSG.MOT_GET_GENMOVEPARAMS], 1\n    )\n    return st.unpack(\"&lt;l\", get_msg.data[2:])[0]\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_home_parameters","title":"<code>get_home_parameters()</code>  <code>async</code>","text":"<p>Get the homing velocity parameter.</p> <p>:return: The homing velocity. :rtype: int</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_home_parameters(self):\n    \"\"\"Get the homing velocity parameter.\n\n    :return: The homing velocity.\n    :rtype: int\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_HOMEPARAMS, [MGMSG.MOT_GET_HOMEPARAMS], 1\n    )\n    return st.unpack(\"&lt;L\", get_msg.data[6:10])[0]\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_jog_parameters","title":"<code>get_jog_parameters()</code>  <code>async</code>","text":"<p>Get the velocity jog parameters.</p> <p>:return: A 5 int tuple containing in this order: jog_mode,     step_size, acceleration, max_velocity, stop_mode :rtype: A 5 int tuple.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_jog_parameters(self):\n    \"\"\"Get the velocity jog parameters.\n\n    :return: A 5 int tuple containing in this order: jog_mode,\n        step_size, acceleration, max_velocity, stop_mode\n    :rtype: A 5 int tuple.\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_JOGPARAMS, [MGMSG.MOT_GET_JOGPARAMS], 1\n    )\n    (jog_mode, step_size, _, acceleration, max_velocity, stop_mode) = st.unpack(\n        \"&lt;HLLLLH\", get_msg.data[2:]\n    )\n    return jog_mode, step_size, acceleration, max_velocity, stop_mode\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_limit_switch_parameters","title":"<code>get_limit_switch_parameters()</code>  <code>async</code>","text":"<p>Get the limit switch parameters.</p> <p>:return: A 5 int tuple containing the following in order: cw_hw_limit,  ccw_hw_limit, cw_sw_limit, ccw_sw_limit, sw_limit_mode. Cf.  description in  :py:meth:<code>set_limit_switch_parameters()  &lt;Tdc.set_limit_switch_parameters&gt;</code>  method. :rtype: A 5 int tuple.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_limit_switch_parameters(self):\n    \"\"\"Get the limit switch parameters.\n\n    :return: A 5 int tuple containing the following in order: cw_hw_limit,\n     ccw_hw_limit, cw_sw_limit, ccw_sw_limit, sw_limit_mode. Cf.\n     description in\n     :py:meth:`set_limit_switch_parameters()\n     &lt;Tdc.set_limit_switch_parameters&gt;`\n     method.\n    :rtype: A 5 int tuple.\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_LIMSWITCHPARAMS, [MGMSG.MOT_GET_LIMSWITCHPARAMS], 1\n    )\n    return st.unpack(\"&lt;HHLLH\", get_msg.data[2:])\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_move_absolute_parameters","title":"<code>get_move_absolute_parameters()</code>  <code>async</code>","text":"<p>Get the absolute position move parameter.</p> <p>:return: The absolute position to move. :rtype: int</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_move_absolute_parameters(self):\n    \"\"\"Get the absolute position move parameter.\n\n    :return: The absolute position to move.\n    :rtype: int\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_MOVEABSPARAMS, [MGMSG.MOT_GET_MOVEABSPARAMS], 1\n    )\n    return st.unpack(\"&lt;l\", get_msg.data[2:])[0]\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_move_relative_parameters","title":"<code>get_move_relative_parameters()</code>  <code>async</code>","text":"<p>Get the relative distance move parameter.</p> <p>:return: The relative distance move parameter. :rtype: int</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_move_relative_parameters(self):\n    \"\"\"Get the relative distance move parameter.\n\n    :return: The relative distance move parameter.\n    :rtype: int\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_MOVERELPARAMS, [MGMSG.MOT_GET_MOVERELPARAMS], 1\n    )\n    return st.unpack(\"&lt;l\", get_msg.data[2:])[0]\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_position_counter","title":"<code>get_position_counter()</code>  <code>async</code>","text":"<p>Get the \"live\" position count from the controller.</p> <p>:return: The value of the position counter. :rtype: int</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_position_counter(self):\n    \"\"\"Get the \"live\" position count from the controller.\n\n    :return: The value of the position counter.\n    :rtype: int\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_POSCOUNTER, [MGMSG.MOT_GET_POSCOUNTER], 1\n    )\n    return st.unpack(\"&lt;l\", get_msg.data[2:])[0]\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_pot_parameters","title":"<code>get_pot_parameters()</code>  <code>async</code>","text":"<p>Get pot parameters.</p> <p>:return: An 8 int tuple containing the following values: zero_wnd,     vel1, wnd1, vel2, wnd2, vel3, wnd3, vel4. See     :py:meth:<code>set_pot_parameters()&lt;Tdc.set_pot_parameters&gt;</code> for a     description of each tuple element meaning. :rtype: An 8 int tuple</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_pot_parameters(self):\n    \"\"\"Get pot parameters.\n\n    :return: An 8 int tuple containing the following values: zero_wnd,\n        vel1, wnd1, vel2, wnd2, vel3, wnd3, vel4. See\n        :py:meth:`set_pot_parameters()&lt;Tdc.set_pot_parameters&gt;` for a\n        description of each tuple element meaning.\n    :rtype: An 8 int tuple\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_POTPARAMS, [MGMSG.MOT_GET_POTPARAMS], 1\n    )\n    return st.unpack(\"&lt;HLHLHLHL\", get_msg.data[2:])\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_status_bits","title":"<code>get_status_bits()</code>  <code>async</code>","text":"<p>Request a cut down version of the status update with status bits.</p> <p>:return: The motor status. :rtype:</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_status_bits(self):\n    \"\"\"Request a cut down version of the status update with status bits.\n\n    :return: The motor status.\n    :rtype:\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_STATUSBITS, [MGMSG.MOT_GET_STATUSBITS], 1\n    )\n    return st.unpack(\"&lt;L\", get_msg.data[2:])[0]\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.get_velocity_parameters","title":"<code>get_velocity_parameters()</code>  <code>async</code>","text":"<p>Get the trapezoidal velocity parameters.</p> <p>:return: A 2 int tuple: (acceleration, max_velocity). :rtype: A 2 int tuple (int, int)</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def get_velocity_parameters(self):\n    \"\"\"Get the trapezoidal velocity parameters.\n\n    :return: A 2 int tuple: (acceleration, max_velocity).\n    :rtype: A 2 int tuple (int, int)\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.MOT_REQ_VELPARAMS, [MGMSG.MOT_GET_VELPARAMS], 1\n    )\n    return st.unpack(\"&lt;LL\", get_msg.data[6:])\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.move_absolute","title":"<code>move_absolute(absolute_distance)</code>  <code>async</code>","text":"<p>Start an absolute move.</p> <p>:param absolute_distance: The distance to move. This is a signed     integer that specifies the absolute distance in position encoder     counts.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def move_absolute(self, absolute_distance):\n    \"\"\"Start an absolute move.\n\n    :param absolute_distance: The distance to move. This is a signed\n        integer that specifies the absolute distance in position encoder\n        counts.\n    \"\"\"\n    payload = st.pack(\"&lt;Hl\", 1, absolute_distance)\n    await self.send_request(\n        MGMSG.MOT_MOVE_ABSOLUTE,\n        [MGMSG.MOT_MOVE_COMPLETED, MGMSG.MOT_MOVE_STOPPED],\n        data=payload,\n    )\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.move_absolute_memory","title":"<code>move_absolute_memory()</code>  <code>async</code>","text":"<p>Start an absolute move of distance in the controller's memory.</p> <p>The absolute move position parameter used for the move will be the parameter sent previously by a :py:meth:<code>set_move_absolute_parameters() &lt;Tdc.set_move_absolute_parameters&gt;</code> command.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def move_absolute_memory(self):\n    \"\"\"Start an absolute move of distance in the controller's memory.\n\n    The absolute move position parameter used for the move will be the\n    parameter sent previously by a :py:meth:`set_move_absolute_parameters()\n    &lt;Tdc.set_move_absolute_parameters&gt;`\n    command.\n    \"\"\"\n    await self.send_request(\n        MGMSG.MOT_MOVE_ABSOLUTE,\n        [MGMSG.MOT_MOVE_COMPLETED, MGMSG.MOT_MOVE_STOPPED],\n        param1=1,\n    )\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.move_home","title":"<code>move_home()</code>  <code>async</code>","text":"<p>Start a home move sequence.</p> <p>This call is blocking until device is homed or move is stopped.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def move_home(self):\n    \"\"\"Start a home move sequence.\n\n    This call is blocking until device is homed or move is stopped.\n    \"\"\"\n    await self.send_request(\n        MGMSG.MOT_MOVE_HOME,\n        [MGMSG.MOT_MOVE_HOMED, MGMSG.MOT_MOVE_STOPPED],\n        1,\n    )\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.move_jog","title":"<code>move_jog(direction)</code>  <code>async</code>","text":"<p>Start a jog move.</p> <p>:param direction: The direction to jog. 1 is forward, 2 is backward.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def move_jog(self, direction):\n    \"\"\"Start a jog move.\n\n    :param direction: The direction to jog. 1 is forward, 2 is backward.\n    \"\"\"\n    await self.send_request(\n        MGMSG.MOT_MOVE_JOG,\n        [MGMSG.MOT_MOVE_COMPLETED, MGMSG.MOT_MOVE_STOPPED],\n        param1=1,\n        param2=direction,\n    )\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.move_relative","title":"<code>move_relative(relative_distance)</code>  <code>async</code>","text":"<p>Start a relative move</p> <p>:param relative_distance: The distance to move in position encoder     counts.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def move_relative(self, relative_distance):\n    \"\"\"Start a relative move\n\n    :param relative_distance: The distance to move in position encoder\n        counts.\n    \"\"\"\n    payload = st.pack(\"&lt;Hl\", 1, relative_distance)\n    await self.send_request(\n        MGMSG.MOT_MOVE_RELATIVE,\n        [MGMSG.MOT_MOVE_COMPLETED, MGMSG.MOT_MOVE_STOPPED],\n        data=payload,\n    )\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.move_relative_memory","title":"<code>move_relative_memory()</code>  <code>async</code>","text":"<p>Start a relative move of distance in the controller's memory</p> <p>The relative distance parameter used for the move will be the parameter sent previously by a :py:meth:<code>set_move_relative_parameters() &lt;Tdc.set_move_relative_parameters&gt;</code> command.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def move_relative_memory(self):\n    \"\"\"Start a relative move of distance in the controller's memory\n\n    The relative distance parameter used for the move will be the parameter\n    sent previously by a :py:meth:`set_move_relative_parameters()\n    &lt;Tdc.set_move_relative_parameters&gt;`\n    command.\n    \"\"\"\n    await self.send_request(\n        MGMSG.MOT_MOVE_RELATIVE,\n        [MGMSG.MOT_MOVE_COMPLETED, MGMSG.MOT_MOVE_STOPPED],\n        1,\n    )\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.move_stop","title":"<code>move_stop(stop_mode)</code>  <code>async</code>","text":"<p>Stop any type of motor move.</p> <p>Stops any of those motor move: relative, absolute, homing or move at velocity.</p> <p>:param stop_mode: The stop mode defines either an immediate (abrupt)     or profiled stop. Set this byte to 1 to stop immediately, or to 2     to stop in a controlled (profiled) manner.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def move_stop(self, stop_mode):\n    \"\"\"Stop any type of motor move.\n\n    Stops any of those motor move: relative, absolute, homing or move at\n    velocity.\n\n    :param stop_mode: The stop mode defines either an immediate (abrupt)\n        or profiled stop. Set this byte to 1 to stop immediately, or to 2\n        to stop in a controlled (profiled) manner.\n    \"\"\"\n    if await self.is_moving():\n        await self.send_request(\n            MGMSG.MOT_MOVE_STOP,\n            [MGMSG.MOT_MOVE_STOPPED, MGMSG.MOT_MOVE_COMPLETED],\n            1,\n            stop_mode,\n        )\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.move_velocity","title":"<code>move_velocity(direction)</code>  <code>async</code>","text":"<p>Start a move.</p> <p>When this method is called, the motor will move continuously in the specified direction using the velocity parameter set by the :py:meth:<code>set_move_relative_parameters() &lt;Tdc.set_move_relative_parameters&gt;</code> command until a :py:meth:<code>move_stop()&lt;Tdc.move_stop&gt;</code> command (either StopImmediate or StopProfiled) is called, or a limit switch is reached.</p> <p>:param direction: The direction to jog: 1 to move forward, 2 to move     backward.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def move_velocity(self, direction):\n    \"\"\"Start a move.\n\n    When this method is called, the motor will move continuously in the\n    specified direction using the velocity parameter set by the\n    :py:meth:`set_move_relative_parameters()\n    &lt;Tdc.set_move_relative_parameters&gt;`\n    command until a :py:meth:`move_stop()&lt;Tdc.move_stop&gt;` command (either\n    StopImmediate or StopProfiled) is called, or a limit switch is reached.\n\n    :param direction: The direction to jog: 1 to move forward, 2 to move\n        backward.\n    \"\"\"\n    await self.send(Message(MGMSG.MOT_MOVE_VELOCITY, param1=1, param2=direction))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.resume_end_of_move_messages","title":"<code>resume_end_of_move_messages()</code>  <code>async</code>","text":"<p>Resume all unsolicited \"end of move\" messages and error messages returned by the controller.</p> <p>i.e., MGMSG.MOT_MOVE_STOPPED, MGMSG.MOT_MOVE_COMPLETED, MGMSG.MOT_MOVE_HOMED</p> <p>The command also disables the error messages that the controller sends when an error condition is detected: MGMSG.HW_RESPONSE, MGMSG.HW_RICHRESPONSE</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def resume_end_of_move_messages(self):\n    \"\"\"Resume all unsolicited \"end of move\" messages and error messages\n    returned by the controller.\n\n    i.e., MGMSG.MOT_MOVE_STOPPED, MGMSG.MOT_MOVE_COMPLETED,\n    MGMSG.MOT_MOVE_HOMED\n\n    The command also disables the error messages that the controller sends\n    when an error condition is detected:\n    MGMSG.HW_RESPONSE,\n    MGMSG.HW_RICHRESPONSE\n    \"\"\"\n    await self.send(Message(MGMSG.MOT_RESUME_ENDOFMOVEMSGS))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_av_modes","title":"<code>set_av_modes(mode_bits)</code>  <code>async</code>","text":"<p>Set the LED indicator modes.</p> <p>The LED on the control keyboard can be configured to indicate certain driver states.</p> <p>:param mode_bits: Set the bit 0 will make the LED flash when the     'Ident' message is sent.     Set the bit 1 will make the LED flash when the motor reaches a     forward or reverse limit switch.     Set the bit 3 (value 8) will make the LED lit when motor is moving.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_av_modes(self, mode_bits):\n    \"\"\"Set the LED indicator modes.\n\n    The LED on the control keyboard can be configured to indicate certain\n    driver states.\n\n    :param mode_bits: Set the bit 0 will make the LED flash when the\n        'Ident' message is sent.\n        Set the bit 1 will make the LED flash when the motor reaches a\n        forward or reverse limit switch.\n        Set the bit 3 (value 8) will make the LED lit when motor is moving.\n    \"\"\"\n    payload = st.pack(\"&lt;HH\", 1, mode_bits)\n    await self.send(Message(MGMSG.MOT_SET_AVMODES, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_button_parameters","title":"<code>set_button_parameters(mode, position1, position2)</code>  <code>async</code>","text":"<p>Set button parameters.</p> <p>The control keypad can be used either to jog the motor, or to perform moves to absolute positions. This function is used to set the front panel button functionality.</p> <p>:param mode: If set to 1, the buttons are used to jog the motor. Once     set to this mode, the move parameters for the buttons are taken     from the arguments of the :py:meth:<code>set_jog_parameters()     &lt;Tdc.set_jog_parameters&gt;</code>     method. If set to 2, each button can be programmed with a     differente position value such that the controller will move the     motor to that position when the specific button is pressed. :param position1: The position (in encoder counts) to which the motor     will move when the top button is pressed. :param position2: The position (in encoder counts) to which the motor     will move when the bottom button is pressed.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_button_parameters(self, mode, position1, position2):\n    \"\"\"Set button parameters.\n\n    The control keypad can be used either to jog the motor, or to perform\n    moves to absolute positions. This function is used to set the front\n    panel button functionality.\n\n    :param mode: If set to 1, the buttons are used to jog the motor. Once\n        set to this mode, the move parameters for the buttons are taken\n        from the arguments of the :py:meth:`set_jog_parameters()\n        &lt;Tdc.set_jog_parameters&gt;`\n        method. If set to 2, each button can be programmed with a\n        differente position value such that the controller will move the\n        motor to that position when the specific button is pressed.\n    :param position1: The position (in encoder counts) to which the motor\n        will move when the top button is pressed.\n    :param position2: The position (in encoder counts) to which the motor\n        will move when the bottom button is pressed.\n    \"\"\"\n    payload = st.pack(\"&lt;HHllHH\", 1, mode, position1, position2, 0, 0)\n    await self.send(Message(MGMSG.MOT_SET_BUTTONPARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_dc_pid_parameters","title":"<code>set_dc_pid_parameters(proportional, integral, differential, integral_limit, filter_control=15)</code>  <code>async</code>","text":"<p>Set the position control loop parameters.</p> <p>:param proportional: The proportional gain, values in range [0; 32767]. :param integral: The integral gain, values in range [0; 32767]. :param differential: The differential gain, values in range [0; 32767]. :param integral_limit: The integral limit parameter is used to cap the     value of the integrator to prevent runaway of the integral sum at     the output. Values are in range [0; 32767]. If set to 0, then     integration term in the PID loop is ignored. :param filter_control: Identifies which of the above are applied by     setting the corresponding bit to 1. By default, all parameters are     applied, and this parameter is set to 0x0F (1111).</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_dc_pid_parameters(\n    self,\n    proportional,\n    integral,\n    differential,\n    integral_limit,\n    filter_control=0x0F,\n):\n    \"\"\"Set the position control loop parameters.\n\n    :param proportional: The proportional gain, values in range [0; 32767].\n    :param integral: The integral gain, values in range [0; 32767].\n    :param differential: The differential gain, values in range [0; 32767].\n    :param integral_limit: The integral limit parameter is used to cap the\n        value of the integrator to prevent runaway of the integral sum at\n        the output. Values are in range [0; 32767]. If set to 0, then\n        integration term in the PID loop is ignored.\n    :param filter_control: Identifies which of the above are applied by\n        setting the corresponding bit to 1. By default, all parameters are\n        applied, and this parameter is set to 0x0F (1111).\n    \"\"\"\n    payload = st.pack(\n        \"&lt;HLLLLH\",\n        1,\n        proportional,\n        integral,\n        differential,\n        integral_limit,\n        filter_control,\n    )\n    await self.send(Message(MGMSG.MOT_SET_DCPIDPARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_eeprom_parameters","title":"<code>set_eeprom_parameters(msg_id)</code>  <code>async</code>","text":"<p>Save the parameter settings for the specified message.</p> <p>:param msg_id: The message ID of the message containing the parameters     to be saved.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_eeprom_parameters(self, msg_id):\n    \"\"\"Save the parameter settings for the specified message.\n\n    :param msg_id: The message ID of the message containing the parameters\n        to be saved.\n    \"\"\"\n    payload = st.pack(\"&lt;HH\", 1, msg_id)\n    await self.send(Message(MGMSG.MOT_SET_EEPROMPARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_encoder_counter","title":"<code>set_encoder_counter(encoder_count)</code>  <code>async</code>","text":"<p>Set encoder count in the controller.</p> <p>This is only applicable to stages and actuators fitted with an encoder. In general this command is not normally used. Instead the device is homed at power-up.</p> <p>:param encoder_count: The new value of the encoder counter.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_encoder_counter(self, encoder_count):\n    \"\"\"Set encoder count in the controller.\n\n    This is only applicable to stages and actuators fitted\n    with an encoder. In general this command is not normally used.\n    Instead the device is homed at power-up.\n\n    :param encoder_count: The new value of the encoder counter.\n    \"\"\"\n    payload = st.pack(\"&lt;Hl\", 1, encoder_count)\n    await self.send(Message(MGMSG.MOT_SET_ENCCOUNTER, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_gen_move_parameters","title":"<code>set_gen_move_parameters(backlash_distance)</code>  <code>async</code>","text":"<p>Set the backlash distance.</p> <p>:param backlash_distance: The value of the backlash distance,     which specifies the relative distance in position counts.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_gen_move_parameters(self, backlash_distance):\n    \"\"\"Set the backlash distance.\n\n    :param backlash_distance: The value of the backlash distance,\n        which specifies the relative distance in position counts.\n    \"\"\"\n    payload = st.pack(\"&lt;Hl\", 1, backlash_distance)\n    await self.send(Message(MGMSG.MOT_SET_GENMOVEPARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_home_parameters","title":"<code>set_home_parameters(home_velocity)</code>  <code>async</code>","text":"<p>Set the homing velocity parameter.</p> <p>:param home_velocity: Homing velocity.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_home_parameters(self, home_velocity):\n    \"\"\"Set the homing velocity parameter.\n\n    :param home_velocity: Homing velocity.\n    \"\"\"\n    payload = st.pack(\"&lt;HHHLL\", 1, 0, 0, home_velocity, 0)\n    await self.send(Message(MGMSG.MOT_SET_HOMEPARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_jog_parameters","title":"<code>set_jog_parameters(mode, step_size, acceleration, max_velocity, stop_mode)</code>  <code>async</code>","text":"<p>Set the velocity jog parameters.</p> <p>:param mode: 1 for continuous jogging, 2 for single step jogging. :param step_size: The jog step size in encoder counts. :param acceleration: The acceleration in encoder counts/sec/sec. :param max_velocity: The maximum (final) velocity in encoder     counts/sec. :param stop_mode: 1 for immediate (abrupt) stop, 2 for profiled stop     (with controlled deceleration).</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_jog_parameters(\n    self, mode, step_size, acceleration, max_velocity, stop_mode\n):\n    \"\"\"Set the velocity jog parameters.\n\n    :param mode: 1 for continuous jogging, 2 for single step jogging.\n    :param step_size: The jog step size in encoder counts.\n    :param acceleration: The acceleration in encoder counts/sec/sec.\n    :param max_velocity: The maximum (final) velocity in encoder\n        counts/sec.\n    :param stop_mode: 1 for immediate (abrupt) stop, 2 for profiled stop\n        (with controlled deceleration).\n    \"\"\"\n    payload = st.pack(\n        \"&lt;HHLLLLH\",\n        1,\n        mode,\n        step_size,\n        0,\n        acceleration,\n        max_velocity,\n        stop_mode,\n    )\n    await self.send(Message(MGMSG.MOT_SET_JOGPARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_limit_switch_parameters","title":"<code>set_limit_switch_parameters(cw_hw_limit, ccw_hw_limit, cw_sw_limit=0, ccw_sw_limit=0, sw_limit_mode=1)</code>  <code>async</code>","text":"<p>Set the limit switch parameters.</p> <p>:param cw_hw_limit: The operation of clockwise hardware limit switch     when contact is made.</p> <pre><code>0x01 Ignore switch or switch not present.\n\n0x02 Switch makes on contact.\n\n0x03 Switch breaks on contact.\n\n0x04 Switch makes on contact - only used for homes (e.g. limit\nswitched rotation stages).\n\n0x05 Switch breaks on contact - only used for homes (e.g. limit\nswitched rotations stages).\n\n0x06 For PMD based brushless servo controllers only - uses index\nmark for homing.\n\nNote. Set upper bit to swap CW and CCW limit switches in code. Both\nCWHardLimit and CCWHardLimit structure members will have the upper\nbit set when limit switches have been physically swapped.\n</code></pre> <p>:param ccw_hw_limit: The operation of counter clockwise hardware limit     switch when contact is made. :param cw_sw_limit: Clockwise software limit in position steps, as a     32 bit unsigned long. (Not applicable to TDC001 units) :param ccw_sw_limit: Counter clockwise software limit in position steps     (scaling as for CW limit). (Not applicable to TDC001 units) :param sw_limit_mode: Software limit switch mode</p> <pre><code>0x01 Ignore Limit\n\n0x02 Stop Immediate at Limit\n\n0x03 Profiled Stop at limit\n\n0x80 Rotation Stage Limit (bitwise OR'd with one of the settings\nabove) (Not applicable to TDC001 units)\n</code></pre> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_limit_switch_parameters(\n    self,\n    cw_hw_limit,\n    ccw_hw_limit,\n    cw_sw_limit=0,\n    ccw_sw_limit=0,\n    sw_limit_mode=0x1,\n):\n    \"\"\"Set the limit switch parameters.\n\n    :param cw_hw_limit: The operation of clockwise hardware limit switch\n        when contact is made.\n\n        0x01 Ignore switch or switch not present.\n\n        0x02 Switch makes on contact.\n\n        0x03 Switch breaks on contact.\n\n        0x04 Switch makes on contact - only used for homes (e.g. limit\n        switched rotation stages).\n\n        0x05 Switch breaks on contact - only used for homes (e.g. limit\n        switched rotations stages).\n\n        0x06 For PMD based brushless servo controllers only - uses index\n        mark for homing.\n\n        Note. Set upper bit to swap CW and CCW limit switches in code. Both\n        CWHardLimit and CCWHardLimit structure members will have the upper\n        bit set when limit switches have been physically swapped.\n    :param ccw_hw_limit: The operation of counter clockwise hardware limit\n        switch when contact is made.\n    :param cw_sw_limit: Clockwise software limit in position steps, as a\n        32 bit unsigned long. (Not applicable to TDC001 units)\n    :param ccw_sw_limit: Counter clockwise software limit in position steps\n        (scaling as for CW limit). (Not applicable to TDC001 units)\n    :param sw_limit_mode: Software limit switch mode\n\n        0x01 Ignore Limit\n\n        0x02 Stop Immediate at Limit\n\n        0x03 Profiled Stop at limit\n\n        0x80 Rotation Stage Limit (bitwise OR'd with one of the settings\n        above) (Not applicable to TDC001 units)\n    \"\"\"\n    payload = st.pack(\n        \"&lt;HHHLLH\",\n        1,\n        cw_hw_limit,\n        ccw_hw_limit,\n        cw_sw_limit,\n        ccw_sw_limit,\n        sw_limit_mode,\n    )\n    await self.send(Message(MGMSG.MOT_SET_LIMSWITCHPARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_move_absolute_parameters","title":"<code>set_move_absolute_parameters(absolute_position)</code>  <code>async</code>","text":"<p>Set the following absolute move parameter: absolute_position.</p> <p>:param absolute_position: The absolute position to move. This is a     signed integer that specifies the absolute move position in encoder     counts.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_move_absolute_parameters(self, absolute_position):\n    \"\"\"Set the following absolute move parameter: absolute_position.\n\n    :param absolute_position: The absolute position to move. This is a\n        signed integer that specifies the absolute move position in encoder\n        counts.\n    \"\"\"\n    payload = st.pack(\"&lt;Hl\", 1, absolute_position)\n    await self.send(Message(MGMSG.MOT_SET_MOVEABSPARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_move_relative_parameters","title":"<code>set_move_relative_parameters(relative_distance)</code>  <code>async</code>","text":"<p>Set the following relative move parameter: relative_distance.</p> <p>:param relative_distance: The distance to move. This is a signed     integer that specifies the relative distance in position encoder     counts.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_move_relative_parameters(self, relative_distance):\n    \"\"\"Set the following relative move parameter: relative_distance.\n\n    :param relative_distance: The distance to move. This is a signed\n        integer that specifies the relative distance in position encoder\n        counts.\n    \"\"\"\n    payload = st.pack(\"&lt;Hl\", 1, relative_distance)\n    await self.send(Message(MGMSG.MOT_SET_MOVERELPARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_position_counter","title":"<code>set_position_counter(position)</code>  <code>async</code>","text":"<p>Set the \"live\" position count in the controller.</p> <p>In general, this command is not normally used. Instead, the stage is homed immediately after power-up; and after the homing process is completed, the position counter is automatically updated to show the actual position.</p> <p>:param position: The new value of the position counter.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_position_counter(self, position):\n    \"\"\"Set the \"live\" position count in the controller.\n\n    In general, this command is not normally used. Instead, the stage is\n    homed immediately after power-up; and after the homing process is\n    completed, the position counter is automatically updated to show the\n    actual position.\n\n    :param position: The new value of the position counter.\n    \"\"\"\n    payload = st.pack(\"&lt;Hl\", 1, position)\n    await self.send(Message(MGMSG.MOT_SET_POSCOUNTER, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_pot_parameters","title":"<code>set_pot_parameters(zero_wnd, vel1, wnd1, vel2, wnd2, vel3, wnd3, vel4)</code>  <code>async</code>","text":"<p>Set pot parameters.</p> <p>:param zero_wnd: The deflection from the mid position (in ADC counts     0 to 127) before motion can start. :param vel1: The velocity to move when between zero_wnd and wnd1. :param wnd1: The deflection from the mid position (in ADC counts     zero_wnd to 127) to apply vel1. :param vel2: The velocity to move when between wnd1 and wnd2. :param wnd2: The deflection from the mid position (in ADC counts     wnd1 to 127) to apply vel2. :param vel3: The velocity to move when between wnd2 and wnd3. :param wnd3: The deflection from the mid position (in ADC counts     wnd2 to 127) to apply vel3. :param vel4: The velocity to move when beyond wnd3.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_pot_parameters(\n    self, zero_wnd, vel1, wnd1, vel2, wnd2, vel3, wnd3, vel4\n):\n    \"\"\"Set pot parameters.\n\n    :param zero_wnd: The deflection from the mid position (in ADC counts\n        0 to 127) before motion can start.\n    :param vel1: The velocity to move when between zero_wnd and wnd1.\n    :param wnd1: The deflection from the mid position (in ADC counts\n        zero_wnd to 127) to apply vel1.\n    :param vel2: The velocity to move when between wnd1 and wnd2.\n    :param wnd2: The deflection from the mid position (in ADC counts\n        wnd1 to 127) to apply vel2.\n    :param vel3: The velocity to move when between wnd2 and wnd3.\n    :param wnd3: The deflection from the mid position (in ADC counts\n        wnd2 to 127) to apply vel3.\n    :param vel4: The velocity to move when beyond wnd3.\n    \"\"\"\n    payload = st.pack(\n        \"&lt;HHLHLHLHL\", 1, zero_wnd, vel1, wnd1, vel2, wnd2, vel3, wnd3, vel4\n    )\n    await self.send(Message(MGMSG.MOT_SET_POTPARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.set_velocity_parameters","title":"<code>set_velocity_parameters(acceleration, max_velocity)</code>  <code>async</code>","text":"<p>Set the trapezoidal velocity parameter.</p> <p>:param acceleration: The acceleration in encoder counts/sec/sec. :param max_velocity: The maximum (final) velocity in counts/sec.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def set_velocity_parameters(self, acceleration, max_velocity):\n    \"\"\"Set the trapezoidal velocity parameter.\n\n    :param acceleration: The acceleration in encoder counts/sec/sec.\n    :param max_velocity: The maximum (final) velocity in counts/sec.\n    \"\"\"\n    payload = st.pack(\"&lt;HLLL\", 1, 0, acceleration, max_velocity)\n    await self.send(Message(MGMSG.MOT_SET_VELPARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tdc001/#thorlabs_cube.driver.tcube.tdc.Tdc.suspend_end_of_move_messages","title":"<code>suspend_end_of_move_messages()</code>  <code>async</code>","text":"<p>Disable all unsolicited \"end of move\" messages and error messages returned by the controller.</p> <p>i.e., MGMSG.MOT_MOVE_STOPPED, MGMSG.MOT_MOVE_COMPLETED, MGMSGS_MOT_MOVE_HOMED</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tdc.py</code> <pre><code>async def suspend_end_of_move_messages(self):\n    \"\"\"Disable all unsolicited \"end of move\" messages and error messages\n    returned by the controller.\n\n    i.e., MGMSG.MOT_MOVE_STOPPED, MGMSG.MOT_MOVE_COMPLETED,\n    MGMSGS_MOT_MOVE_HOMED\n    \"\"\"\n    await self.send(Message(MGMSG.MOT_SUSPEND_ENDOFMOVEMSGS))\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/","title":"TPA101","text":""},{"location":"sections/cube/tcube/tpa101/#api-reference","title":"API Reference","text":""},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa","title":"<code>Tpa</code>","text":"<p>               Bases: <code>_Cube</code></p> <p>TPA101 Position Sensing Detector driver implementation.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>class Tpa(_Cube):\n    \"\"\"TPA101 Position Sensing Detector driver implementation.\"\"\"\n\n    def __init__(self, serial_dev: str) -&gt; None:\n        \"\"\"Initialize the TPA101 driver.\n\n        :param serial_dev: Serial device identifier.\n        \"\"\"\n        super().__init__(serial_dev)\n        self.loop_params = None\n        self.status_report_counter = 0\n\n    async def handle_message(self, msg: Message) -&gt; None:\n        \"\"\"Handle incoming messages from the TPA101 device.\n\n        :param msg: Message object received from the device.\n        \"\"\"\n        msg_id: MGMSG = msg.id\n        data: bytes = msg.data\n\n        if msg_id == MGMSG.HW_DISCONNECT:\n            raise MsgError(\"Error: Please disconnect the TPA101\")\n\n        elif msg_id == MGMSG.HW_RESPONSE:\n            raise MsgError(\"Hardware error, please disconnect and reconnect the TPA101\")\n\n        elif msg_id == MGMSG.QUAD_GET_STATUSUPDATE:\n            x_diff, y_diff, sum_val, x_pos, y_pos, status_bits = st.unpack(\n                \"&lt;hhIhhI\", data[6:20]\n            )\n\n            # Update internal state variables with the extracted values\n            self.x_diff = x_diff\n            self.y_diff = y_diff\n            self.sum_val = sum_val\n            self.x_pos = x_pos\n            self.y_pos = y_pos\n            self.status_bits = status_bits\n\n            if self.status_report_counter == 25:\n                self.status_report_counter = 0\n                await self.send(Message(MGMSG.QUAD_ACK_STATUSUPDATE))\n            else:\n                self.status_report_counter += 1\n\n    async def set_loop_params(self, p_gain: int, i_gain: int, d_gain: int) -&gt; None:\n        \"\"\"Set proportional, integral, and differential feedback loop constants.\n\n        :param p_gain: Proportional gain value.\n        :param i_gain: Integral gain value.\n        :param d_gain: Differential gain value.\n        \"\"\"\n        payload = st.pack(\n            \"&lt;HHHH\", QUADMSG.QUAD_LOOP_PARAMS_SUB_ID.value, p_gain, i_gain, d_gain\n        )\n        await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n\n    async def get_loop_params(self) -&gt; tuple[int, int, int]:\n        \"\"\"Get proportional, integral, and differential feedback loop constants.\n\n        :return: A tuple containing p_gain, i_gain, and d_gain values.\n        \"\"\"\n\n        get_msg = await self.send_request(\n            MGMSG.QUAD_REQ_PARAMS,\n            [MGMSG.QUAD_GET_PARAMS],\n            param1=QUADMSG.QUAD_LOOP_PARAMS_SUB_ID.value,\n        )\n        return st.unpack(\"&lt;HHHH\", get_msg.data)[1:]\n\n    async def set_quad_oper_mode(self, mode: int) -&gt; None:\n        \"\"\"Set the operating mode of the unit.\n\n        :param mode: 1 for Monitor Mode, 2 for Open Loop, 3 for Closed Loop.\n        \"\"\"\n\n        payload = st.pack(\"&lt;HH\", QUADMSG.QUAD_OPER_MODE_SUB_ID.value, mode)\n        await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n\n    async def get_quad_oper_mode(self) -&gt; int:\n        \"\"\"Get the operating mode of the unit.\n\n        :return: The current operating mode of the unit.\n        \"\"\"\n\n        get_msg = await self.send_request(\n            MGMSG.QUAD_REQ_PARAMS,\n            [MGMSG.QUAD_GET_PARAMS],\n            param1=QUADMSG.QUAD_OPER_MODE_SUB_ID.value,\n        )\n        return st.unpack(\"&lt;HH\", get_msg.data)[1]\n\n    async def set_quad_position_demand_params(\n        self,\n        x_pos_min: int,\n        x_pos_max: int,\n        y_pos_min: int,\n        y_pos_max: int,\n        low_volt_output_route: int,\n        open_loop_pos_demands: int,\n        x_pos_demand_feedback_sense: float,\n        y_pos_demand_feedback_sense: float,\n    ) -&gt; None:\n        \"\"\"Set position demand parameters for the quad system.\n\n        :param x_pos_min: Minimum X-axis position demand.\n        :param x_pos_max: Maximum X-axis position demand.\n        :param y_pos_min: Minimum Y-axis position demand.\n        :param y_pos_max: Maximum Y-axis position demand.\n        :param low_volt_output_route: LV output signal routing\n        :param open_loop_pos_demands: Open loop position demands configuration\n        :param x_pos_demand_feedback_sense: Signal sense and gain for X-axis output\n        :param y_pos_demand_feedback_sense: Signal sense and gain for Y-axis output\n        \"\"\"\n        payload = st.pack(\n            \"&lt;hhhhhhhhh\",\n            QUADMSG.QUAD_POSITION_DEMAND_PARAMS_SUB_ID.value,\n            x_pos_min,\n            x_pos_max,\n            y_pos_min,\n            y_pos_max,\n            low_volt_output_route,\n            open_loop_pos_demands,\n            x_pos_demand_feedback_sense,\n            y_pos_demand_feedback_sense,\n        )\n        await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n\n    async def get_quad_position_demand_params(self) -&gt; tuple[int, int, int, int]:\n        \"\"\"Get position demand parameters for the quad system.\n\n        :return: A tuple containing x_pos_min, x_pos_max, y_pos_min, and y_pos_max.\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.QUAD_REQ_PARAMS,\n            [MGMSG.QUAD_GET_PARAMS],\n            param1=QUADMSG.QUAD_POSITION_DEMAND_PARAMS_SUB_ID.value,\n        )\n        return st.unpack(\"&lt;hhhhhhhhh\", get_msg.data)[1:]\n\n    async def get_quad_status_bits(self) -&gt; int:\n        \"\"\"Get the status bits of the control unit.\n\n        :return: Status bits of the control unit.\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.QUAD_REQ_PARAMS,\n            [MGMSG.QUAD_GET_PARAMS],\n            param1=QUADMSG.QUAD_STATUS_BITS_SUB_ID.value,\n        )\n        return st.unpack(\"&lt;HI\", get_msg.data)[1]\n\n    async def get_quad_readings(self) -&gt; tuple[int, int, int, int, int]:\n        \"\"\"Get the status bits of the quad readings.\n\n        :return: Status bits of the quad reading.\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.QUAD_REQ_PARAMS,\n            [MGMSG.QUAD_GET_PARAMS],\n            param1=QUADMSG.QUAD_READINGS_SUB_ID.value,\n        )\n        return st.unpack(\"HHHHHH\", get_msg.data)[1:]\n\n    async def set_quad_display_settings(\n        self, disp_intensity: int, disp_mode: int, disp_dim_timeout: int\n    ) -&gt; None:\n        \"\"\"Set the display settings for the quad system.\n\n        :param disp_intensity: Display intensity (0-255).\n        :param disp_mode: Display mode (1 for Difference, 2 for Position).\n        :param disp_dim_timeout: Dim timeout value as per documentation.\n        \"\"\"\n        payload = st.pack(\n            \"&lt;HHHH\",\n            QUADMSG.QUAD_DISP_SETTINGS_SUB_ID.value,\n            disp_intensity,\n            disp_mode,\n            disp_dim_timeout,\n        )\n        await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n\n    async def get_quad_display_settings(self) -&gt; tuple[int, int, int]:\n        \"\"\"Get the display settings for the quad system.\n\n        :return: A tuple containing disp_intensity, disp_mode, and disp_dim_timeout.\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.QUAD_REQ_PARAMS,\n            [MGMSG.QUAD_GET_PARAMS],\n            param1=QUADMSG.QUAD_DISP_SETTINGS_SUB_ID.value,\n        )\n        return st.unpack(\"&lt;HHHH\", get_msg.data)[1:]\n\n    async def set_quad_position_outputs(self, x_pos: int, y_pos: int) -&gt; None:\n        \"\"\"Set the X and Y position outputs.\n\n        :param x_pos: X-axis position output value (-32768 to 32767).\n        :param y_pos: Y-axis position output value (-32768 to 32767).\n        \"\"\"\n        payload = st.pack(\n            \"&lt;HHH\", QUADMSG.QUAD_POSITION_OUTPUTS_SUB_ID.value, x_pos, y_pos\n        )\n        await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n\n    async def get_quad_position_outputs(self) -&gt; tuple[int, int]:\n        \"\"\"Get the X and Y position outputs.\n\n        :return: A tuple containing x_pos and y_pos.\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.QUAD_REQ_PARAMS,\n            [MGMSG.QUAD_GET_PARAMS],\n            param1=QUADMSG.QUAD_POSITION_OUTPUTS_SUB_ID.value,\n        )\n        return st.unpack(\"&lt;Hhh\", get_msg.data)[1:]\n\n    async def set_quad_loop_params_two(\n        self,\n        p_gain: float,\n        i_gain: float,\n        d_gain: float,\n        d_cutoff_freq: float,\n        notch_freq: float,\n        filter_q: float,\n        notch_on: int,\n        deriv_filter_on: int,\n    ) -&gt; None:\n        \"\"\"Set the extended loop parameters for the quad system.\n\n        :param p_gain: Proportional gain value.\n        :param i_gain: Integral gain value.\n        :param d_gain: Differential gain value.\n        :param d_cutoff_freq: Differential cutoff frequency.\n        :param notch_freq: Notch filter frequency.\n        :param filter_q: Filter quality factor.\n        :param notch_on: Notch filter on/off flag.\n        :param deriv_filter_on: Derivative filter on/off flag.\n        \"\"\"\n        payload = st.pack(\n            \"&lt;HFFFFFFHH\",\n            QUADMSG.QUAD_LOOP_PARAMS_TWO_SUB_ID.value,\n            p_gain,\n            i_gain,\n            d_gain,\n            d_cutoff_freq,\n            notch_freq,\n            filter_q,\n            notch_on,\n            deriv_filter_on,\n        )\n        await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n\n    async def get_quad_loop_params_two(\n        self,\n    ) -&gt; tuple[float, float, float, float, float, float, int, int]:\n        \"\"\"Get the extended loop parameters for the quad system.\n\n        :return: A tuple containing p_gain, i_gain, d_gain, d_cutoff_freq,\n        notch_freq, filter_q, notch_on, deriv_filter_on.\n        \"\"\"\n        get_msg = await self.send_request(\n            MGMSG.QUAD_REQ_PARAMS,\n            [MGMSG.QUAD_GET_PARAMS],\n            param1=QUADMSG.QUAD_LOOP_PARAMS_TWO_SUB_ID.value,\n        )\n        return st.unpack(\"&lt;HFFFFFFHH\", get_msg.data)\n\n    async def set_eeprom_params(self, msg_id: int) -&gt; None:\n        \"\"\"Save the parameter settings for the specified message.\n\n        :param msg_id: The message ID of the message containing the parameters to be saved.\n        \"\"\"\n        payload = st.pack(\"&lt;H\", msg_id)\n        await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.__init__","title":"<code>__init__(serial_dev)</code>","text":"<p>Initialize the TPA101 driver.</p> <p>:param serial_dev: Serial device identifier.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>def __init__(self, serial_dev: str) -&gt; None:\n    \"\"\"Initialize the TPA101 driver.\n\n    :param serial_dev: Serial device identifier.\n    \"\"\"\n    super().__init__(serial_dev)\n    self.loop_params = None\n    self.status_report_counter = 0\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.get_loop_params","title":"<code>get_loop_params()</code>  <code>async</code>","text":"<p>Get proportional, integral, and differential feedback loop constants.</p> <p>:return: A tuple containing p_gain, i_gain, and d_gain values.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def get_loop_params(self) -&gt; tuple[int, int, int]:\n    \"\"\"Get proportional, integral, and differential feedback loop constants.\n\n    :return: A tuple containing p_gain, i_gain, and d_gain values.\n    \"\"\"\n\n    get_msg = await self.send_request(\n        MGMSG.QUAD_REQ_PARAMS,\n        [MGMSG.QUAD_GET_PARAMS],\n        param1=QUADMSG.QUAD_LOOP_PARAMS_SUB_ID.value,\n    )\n    return st.unpack(\"&lt;HHHH\", get_msg.data)[1:]\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.get_quad_display_settings","title":"<code>get_quad_display_settings()</code>  <code>async</code>","text":"<p>Get the display settings for the quad system.</p> <p>:return: A tuple containing disp_intensity, disp_mode, and disp_dim_timeout.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def get_quad_display_settings(self) -&gt; tuple[int, int, int]:\n    \"\"\"Get the display settings for the quad system.\n\n    :return: A tuple containing disp_intensity, disp_mode, and disp_dim_timeout.\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.QUAD_REQ_PARAMS,\n        [MGMSG.QUAD_GET_PARAMS],\n        param1=QUADMSG.QUAD_DISP_SETTINGS_SUB_ID.value,\n    )\n    return st.unpack(\"&lt;HHHH\", get_msg.data)[1:]\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.get_quad_loop_params_two","title":"<code>get_quad_loop_params_two()</code>  <code>async</code>","text":"<p>Get the extended loop parameters for the quad system.</p> <p>:return: A tuple containing p_gain, i_gain, d_gain, d_cutoff_freq, notch_freq, filter_q, notch_on, deriv_filter_on.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def get_quad_loop_params_two(\n    self,\n) -&gt; tuple[float, float, float, float, float, float, int, int]:\n    \"\"\"Get the extended loop parameters for the quad system.\n\n    :return: A tuple containing p_gain, i_gain, d_gain, d_cutoff_freq,\n    notch_freq, filter_q, notch_on, deriv_filter_on.\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.QUAD_REQ_PARAMS,\n        [MGMSG.QUAD_GET_PARAMS],\n        param1=QUADMSG.QUAD_LOOP_PARAMS_TWO_SUB_ID.value,\n    )\n    return st.unpack(\"&lt;HFFFFFFHH\", get_msg.data)\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.get_quad_oper_mode","title":"<code>get_quad_oper_mode()</code>  <code>async</code>","text":"<p>Get the operating mode of the unit.</p> <p>:return: The current operating mode of the unit.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def get_quad_oper_mode(self) -&gt; int:\n    \"\"\"Get the operating mode of the unit.\n\n    :return: The current operating mode of the unit.\n    \"\"\"\n\n    get_msg = await self.send_request(\n        MGMSG.QUAD_REQ_PARAMS,\n        [MGMSG.QUAD_GET_PARAMS],\n        param1=QUADMSG.QUAD_OPER_MODE_SUB_ID.value,\n    )\n    return st.unpack(\"&lt;HH\", get_msg.data)[1]\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.get_quad_position_demand_params","title":"<code>get_quad_position_demand_params()</code>  <code>async</code>","text":"<p>Get position demand parameters for the quad system.</p> <p>:return: A tuple containing x_pos_min, x_pos_max, y_pos_min, and y_pos_max.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def get_quad_position_demand_params(self) -&gt; tuple[int, int, int, int]:\n    \"\"\"Get position demand parameters for the quad system.\n\n    :return: A tuple containing x_pos_min, x_pos_max, y_pos_min, and y_pos_max.\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.QUAD_REQ_PARAMS,\n        [MGMSG.QUAD_GET_PARAMS],\n        param1=QUADMSG.QUAD_POSITION_DEMAND_PARAMS_SUB_ID.value,\n    )\n    return st.unpack(\"&lt;hhhhhhhhh\", get_msg.data)[1:]\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.get_quad_position_outputs","title":"<code>get_quad_position_outputs()</code>  <code>async</code>","text":"<p>Get the X and Y position outputs.</p> <p>:return: A tuple containing x_pos and y_pos.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def get_quad_position_outputs(self) -&gt; tuple[int, int]:\n    \"\"\"Get the X and Y position outputs.\n\n    :return: A tuple containing x_pos and y_pos.\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.QUAD_REQ_PARAMS,\n        [MGMSG.QUAD_GET_PARAMS],\n        param1=QUADMSG.QUAD_POSITION_OUTPUTS_SUB_ID.value,\n    )\n    return st.unpack(\"&lt;Hhh\", get_msg.data)[1:]\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.get_quad_readings","title":"<code>get_quad_readings()</code>  <code>async</code>","text":"<p>Get the status bits of the quad readings.</p> <p>:return: Status bits of the quad reading.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def get_quad_readings(self) -&gt; tuple[int, int, int, int, int]:\n    \"\"\"Get the status bits of the quad readings.\n\n    :return: Status bits of the quad reading.\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.QUAD_REQ_PARAMS,\n        [MGMSG.QUAD_GET_PARAMS],\n        param1=QUADMSG.QUAD_READINGS_SUB_ID.value,\n    )\n    return st.unpack(\"HHHHHH\", get_msg.data)[1:]\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.get_quad_status_bits","title":"<code>get_quad_status_bits()</code>  <code>async</code>","text":"<p>Get the status bits of the control unit.</p> <p>:return: Status bits of the control unit.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def get_quad_status_bits(self) -&gt; int:\n    \"\"\"Get the status bits of the control unit.\n\n    :return: Status bits of the control unit.\n    \"\"\"\n    get_msg = await self.send_request(\n        MGMSG.QUAD_REQ_PARAMS,\n        [MGMSG.QUAD_GET_PARAMS],\n        param1=QUADMSG.QUAD_STATUS_BITS_SUB_ID.value,\n    )\n    return st.unpack(\"&lt;HI\", get_msg.data)[1]\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.handle_message","title":"<code>handle_message(msg)</code>  <code>async</code>","text":"<p>Handle incoming messages from the TPA101 device.</p> <p>:param msg: Message object received from the device.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def handle_message(self, msg: Message) -&gt; None:\n    \"\"\"Handle incoming messages from the TPA101 device.\n\n    :param msg: Message object received from the device.\n    \"\"\"\n    msg_id: MGMSG = msg.id\n    data: bytes = msg.data\n\n    if msg_id == MGMSG.HW_DISCONNECT:\n        raise MsgError(\"Error: Please disconnect the TPA101\")\n\n    elif msg_id == MGMSG.HW_RESPONSE:\n        raise MsgError(\"Hardware error, please disconnect and reconnect the TPA101\")\n\n    elif msg_id == MGMSG.QUAD_GET_STATUSUPDATE:\n        x_diff, y_diff, sum_val, x_pos, y_pos, status_bits = st.unpack(\n            \"&lt;hhIhhI\", data[6:20]\n        )\n\n        # Update internal state variables with the extracted values\n        self.x_diff = x_diff\n        self.y_diff = y_diff\n        self.sum_val = sum_val\n        self.x_pos = x_pos\n        self.y_pos = y_pos\n        self.status_bits = status_bits\n\n        if self.status_report_counter == 25:\n            self.status_report_counter = 0\n            await self.send(Message(MGMSG.QUAD_ACK_STATUSUPDATE))\n        else:\n            self.status_report_counter += 1\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.set_eeprom_params","title":"<code>set_eeprom_params(msg_id)</code>  <code>async</code>","text":"<p>Save the parameter settings for the specified message.</p> <p>:param msg_id: The message ID of the message containing the parameters to be saved.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def set_eeprom_params(self, msg_id: int) -&gt; None:\n    \"\"\"Save the parameter settings for the specified message.\n\n    :param msg_id: The message ID of the message containing the parameters to be saved.\n    \"\"\"\n    payload = st.pack(\"&lt;H\", msg_id)\n    await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.set_loop_params","title":"<code>set_loop_params(p_gain, i_gain, d_gain)</code>  <code>async</code>","text":"<p>Set proportional, integral, and differential feedback loop constants.</p> <p>:param p_gain: Proportional gain value. :param i_gain: Integral gain value. :param d_gain: Differential gain value.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def set_loop_params(self, p_gain: int, i_gain: int, d_gain: int) -&gt; None:\n    \"\"\"Set proportional, integral, and differential feedback loop constants.\n\n    :param p_gain: Proportional gain value.\n    :param i_gain: Integral gain value.\n    :param d_gain: Differential gain value.\n    \"\"\"\n    payload = st.pack(\n        \"&lt;HHHH\", QUADMSG.QUAD_LOOP_PARAMS_SUB_ID.value, p_gain, i_gain, d_gain\n    )\n    await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.set_quad_display_settings","title":"<code>set_quad_display_settings(disp_intensity, disp_mode, disp_dim_timeout)</code>  <code>async</code>","text":"<p>Set the display settings for the quad system.</p> <p>:param disp_intensity: Display intensity (0-255). :param disp_mode: Display mode (1 for Difference, 2 for Position). :param disp_dim_timeout: Dim timeout value as per documentation.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def set_quad_display_settings(\n    self, disp_intensity: int, disp_mode: int, disp_dim_timeout: int\n) -&gt; None:\n    \"\"\"Set the display settings for the quad system.\n\n    :param disp_intensity: Display intensity (0-255).\n    :param disp_mode: Display mode (1 for Difference, 2 for Position).\n    :param disp_dim_timeout: Dim timeout value as per documentation.\n    \"\"\"\n    payload = st.pack(\n        \"&lt;HHHH\",\n        QUADMSG.QUAD_DISP_SETTINGS_SUB_ID.value,\n        disp_intensity,\n        disp_mode,\n        disp_dim_timeout,\n    )\n    await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.set_quad_loop_params_two","title":"<code>set_quad_loop_params_two(p_gain, i_gain, d_gain, d_cutoff_freq, notch_freq, filter_q, notch_on, deriv_filter_on)</code>  <code>async</code>","text":"<p>Set the extended loop parameters for the quad system.</p> <p>:param p_gain: Proportional gain value. :param i_gain: Integral gain value. :param d_gain: Differential gain value. :param d_cutoff_freq: Differential cutoff frequency. :param notch_freq: Notch filter frequency. :param filter_q: Filter quality factor. :param notch_on: Notch filter on/off flag. :param deriv_filter_on: Derivative filter on/off flag.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def set_quad_loop_params_two(\n    self,\n    p_gain: float,\n    i_gain: float,\n    d_gain: float,\n    d_cutoff_freq: float,\n    notch_freq: float,\n    filter_q: float,\n    notch_on: int,\n    deriv_filter_on: int,\n) -&gt; None:\n    \"\"\"Set the extended loop parameters for the quad system.\n\n    :param p_gain: Proportional gain value.\n    :param i_gain: Integral gain value.\n    :param d_gain: Differential gain value.\n    :param d_cutoff_freq: Differential cutoff frequency.\n    :param notch_freq: Notch filter frequency.\n    :param filter_q: Filter quality factor.\n    :param notch_on: Notch filter on/off flag.\n    :param deriv_filter_on: Derivative filter on/off flag.\n    \"\"\"\n    payload = st.pack(\n        \"&lt;HFFFFFFHH\",\n        QUADMSG.QUAD_LOOP_PARAMS_TWO_SUB_ID.value,\n        p_gain,\n        i_gain,\n        d_gain,\n        d_cutoff_freq,\n        notch_freq,\n        filter_q,\n        notch_on,\n        deriv_filter_on,\n    )\n    await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.set_quad_oper_mode","title":"<code>set_quad_oper_mode(mode)</code>  <code>async</code>","text":"<p>Set the operating mode of the unit.</p> <p>:param mode: 1 for Monitor Mode, 2 for Open Loop, 3 for Closed Loop.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def set_quad_oper_mode(self, mode: int) -&gt; None:\n    \"\"\"Set the operating mode of the unit.\n\n    :param mode: 1 for Monitor Mode, 2 for Open Loop, 3 for Closed Loop.\n    \"\"\"\n\n    payload = st.pack(\"&lt;HH\", QUADMSG.QUAD_OPER_MODE_SUB_ID.value, mode)\n    await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.set_quad_position_demand_params","title":"<code>set_quad_position_demand_params(x_pos_min, x_pos_max, y_pos_min, y_pos_max, low_volt_output_route, open_loop_pos_demands, x_pos_demand_feedback_sense, y_pos_demand_feedback_sense)</code>  <code>async</code>","text":"<p>Set position demand parameters for the quad system.</p> <p>:param x_pos_min: Minimum X-axis position demand. :param x_pos_max: Maximum X-axis position demand. :param y_pos_min: Minimum Y-axis position demand. :param y_pos_max: Maximum Y-axis position demand. :param low_volt_output_route: LV output signal routing :param open_loop_pos_demands: Open loop position demands configuration :param x_pos_demand_feedback_sense: Signal sense and gain for X-axis output :param y_pos_demand_feedback_sense: Signal sense and gain for Y-axis output</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def set_quad_position_demand_params(\n    self,\n    x_pos_min: int,\n    x_pos_max: int,\n    y_pos_min: int,\n    y_pos_max: int,\n    low_volt_output_route: int,\n    open_loop_pos_demands: int,\n    x_pos_demand_feedback_sense: float,\n    y_pos_demand_feedback_sense: float,\n) -&gt; None:\n    \"\"\"Set position demand parameters for the quad system.\n\n    :param x_pos_min: Minimum X-axis position demand.\n    :param x_pos_max: Maximum X-axis position demand.\n    :param y_pos_min: Minimum Y-axis position demand.\n    :param y_pos_max: Maximum Y-axis position demand.\n    :param low_volt_output_route: LV output signal routing\n    :param open_loop_pos_demands: Open loop position demands configuration\n    :param x_pos_demand_feedback_sense: Signal sense and gain for X-axis output\n    :param y_pos_demand_feedback_sense: Signal sense and gain for Y-axis output\n    \"\"\"\n    payload = st.pack(\n        \"&lt;hhhhhhhhh\",\n        QUADMSG.QUAD_POSITION_DEMAND_PARAMS_SUB_ID.value,\n        x_pos_min,\n        x_pos_max,\n        y_pos_min,\n        y_pos_max,\n        low_volt_output_route,\n        open_loop_pos_demands,\n        x_pos_demand_feedback_sense,\n        y_pos_demand_feedback_sense,\n    )\n    await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.Tpa.set_quad_position_outputs","title":"<code>set_quad_position_outputs(x_pos, y_pos)</code>  <code>async</code>","text":"<p>Set the X and Y position outputs.</p> <p>:param x_pos: X-axis position output value (-32768 to 32767). :param y_pos: Y-axis position output value (-32768 to 32767).</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>async def set_quad_position_outputs(self, x_pos: int, y_pos: int) -&gt; None:\n    \"\"\"Set the X and Y position outputs.\n\n    :param x_pos: X-axis position output value (-32768 to 32767).\n    :param y_pos: Y-axis position output value (-32768 to 32767).\n    \"\"\"\n    payload = st.pack(\n        \"&lt;HHH\", QUADMSG.QUAD_POSITION_OUTPUTS_SUB_ID.value, x_pos, y_pos\n    )\n    await self.send(Message(MGMSG.QUAD_SET_PARAMS, data=payload))\n</code></pre>"},{"location":"sections/cube/tcube/tpa101/#thorlabs_cube.driver.tcube.tpa.TpaSim","title":"<code>TpaSim</code>","text":"<p>Simulation class for TPA101.</p> Source code in <code>venv/lib/python3.9/site-packages/thorlabs_cube/driver/tcube/tpa.py</code> <pre><code>class TpaSim:\n    \"\"\"Simulation class for TPA101.\"\"\"\n\n    def __init__(self):\n\n        self.loop_params = (0, 0, 0)\n        self.quad_readings = (0, 0, 0, 0, 0)\n        self.pos_demand_params = (0, 0, 0, 0, 2, 0, 0, 0)\n        self.oper_mode = 1\n        self.status_bits = 0x00000001\n        self.display_settings = (255, 1, 2570)\n        self.position_outputs = (0, 0)\n        self.loop_params2 = (0, 0, 0, 0, 0, 0.1, 2, 2)\n        self.eeprom_params = 0x00\n\n    def close(self):\n        pass\n\n    def set_loop_params(self, p_gain: int, i_gain: int, d_gain: int) -&gt; None:\n        self.loop_params = (p_gain, i_gain, d_gain)\n\n    def get_loop_params(self) -&gt; tuple[int, int, int]:\n        return self.loop_params\n\n    def set_quad_oper_mode(self, mode: int) -&gt; None:\n        self.oper_mode = mode\n\n    def get_quad_oper_mode(self) -&gt; int:\n        return self.oper_mode\n\n    def set_quad_position_demand_params(\n        self,\n        x_pos_min: int,\n        x_pos_max: int,\n        y_pos_min: int,\n        y_pos_max: int,\n        low_volt_output_route: int,\n        open_loop_pos_demands: int,\n        x_pos_demand_feedback_sense: float,\n        y_pos_demand_feedback_sense: float,\n    ) -&gt; None:\n\n        self.pos_demand_params = (\n            x_pos_min,\n            x_pos_max,\n            y_pos_min,\n            y_pos_max,\n            low_volt_output_route,\n            open_loop_pos_demands,\n            x_pos_demand_feedback_sense,\n            y_pos_demand_feedback_sense,\n        )\n\n    def get_quad_position_demand_params(\n        self,\n    ) -&gt; tuple[int, int, int, int, int, int, int, int]:\n\n        return self.pos_demand_params\n\n    def get_quad_status_bits(self) -&gt; int:\n\n        return self.status_bits\n\n    def set_quad_display_settings(\n        self, disp_intensity: int, disp_mode: int, disp_dim_timeout: int\n    ) -&gt; None:\n\n        self.display_settings = (disp_intensity, disp_mode, disp_dim_timeout)\n\n    def get_quad_display_settings(self) -&gt; tuple[int, int, int]:\n        return self.display_settings\n\n    def set_quad_position_outputs(self, x_pos: int, y_pos: int) -&gt; None:\n\n        self.position_outputs = (x_pos, y_pos)\n\n    def get_quad_position_outputs(self) -&gt; tuple[int, int]:\n        return self.position_outputs\n\n    def set_quad_loop_params2(\n        self,\n        p_gain: float,\n        i_gain: float,\n        d_gain: float,\n        d_cutoff_freq: float,\n        notch_freq: float,\n        filter_q: float,\n        notch_on: int,\n        deriv_filter_on: int,\n    ) -&gt; None:\n\n        self.loop_params2 = (\n            p_gain,\n            i_gain,\n            d_gain,\n            d_cutoff_freq,\n            notch_freq,\n            filter_q,\n            notch_on,\n            deriv_filter_on,\n        )\n\n    def get_quad_loop_params2(\n        self,\n    ) -&gt; tuple[float, float, float, float, float, float, int, int]:\n        return self.loop_params2\n</code></pre>"}]}
